instances:
  - animal
  - label

features:

  animal:
    - hair
    - feathers
    - eggs
    - milk
    - airborne
    - aquatic
    - predator
    - toothed
    - backbone
    - breathes
    - venomous
    - fins
    - legs
    - tail
    - domestic
    - catsize

  label:
    - Label

train:
  zoo:
    instances: [animal]
    targets: [label]
    path: datasets/train.csv
    batch_size: 32

test:
  zoo:
    instances: [animal]
    targets: [label]
    path: datasets/test.csv
    batch_size: 100000

predicates:
  AnimalClass:
    args: [animal]
    structure:
      type: feed-forward
      layers:
        - in: [animal, 512] 
          activation: leaky_relu
          regularization:
          -  dropout: 0.46411367504928136

        - hidden: [512, 256] 
          activation: leaky_relu
          regularization:
          -  dropout: 0.46411367504928136

        - hidden: [256, 128]  
          activation: leaky_relu
          regularization:
          -  dropout: 0.46411367504928136

        - out: [128, 7] 
          activation: softmax

constants:
  - mammal : 0
  - bird : 1
  - reptile : 2
  - fish : 3
  - amphibian : 4
  - insect : 5
  - invertebrate : 6

knowledge:
  # Mammal Detection
  - rule: Mammal
    args: [animal]
    clause: ((animal[hair] == 1) and (animal[milk] == 1) and (animal[eggs] == 0))

  # Bird Detection
  - rule: Bird
    args: [animal]
    clause: ((animal[feathers] == 1) and (animal[airborne] == 1) and (animal[eggs] == 1))

  # Reptile Detection
  - rule: Reptile
    args: [animal]
    clause: ((animal[eggs] == 1) and (animal[milk] == 0) and (animal[venomous] == 1))

  # Fish Detection
  - rule: Fish
    args: [animal]
    clause: ((animal[aquatic] == 1) and (animal[eggs] == 1) and (animal[fins] == 1))

  # Amphibian Detection
  - rule: Amphibian
    args: [animal]
    clause: ((animal[breathes] == 1) and (animal[eggs] == 1) and (animal[legs] == 4))

  # Insect Detection
  - rule: Insect
    args: [animal]
    clause: ((animal[legs] == 6) and (animal[venomous] == 0) and (animal[toothed] == 0))

  # Invertebrate Detection
  - rule: Invertebrate
    args: [animal]
    clause: ((animal[backbone] == 0) and (animal[legs] == 0))


constraints:
  - rule: all animal. AnimalClass(animal, output)

  # General Classification Rules
  - rule: all animal. ((label == mammal) -> output[0])
  - rule: all animal. ((label == bird) -> output[1])
  - rule: all animal. ((label == reptile) -> output[2])
  - rule: all animal. ((label == fish) -> output[3])
  - rule: all animal. ((label == amphibian) -> output[4])
  - rule: all animal. ((label == insect) -> output[5])
  - rule: all animal. ((label == invertebrate) -> output[6])

  # Logic Rules
  - rule: all animal. (Mammal(animal) -> output[0])
  - rule: all animal. (Bird(animal) -> output[1])
  - rule: all animal. (Reptile(animal) -> output[2])
  - rule: all animal. (Fish(animal) -> output[3])
  - rule: all animal. (Amphibian(animal) -> output[4])
  - rule: all animal. (Insect(animal) -> output[5])
  - rule: all animal. (Invertebrate(animal) -> output[6])