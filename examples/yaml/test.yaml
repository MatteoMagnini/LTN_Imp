instances:
  - flower
features:
  flower:
    - in: sepal_length
    - in: sepal_width
    - in: petal_length
    - in: petal_width
    - out: class

constants:
  - setosa
  - versicolor
  - virginica

predicates:
    Iris:
      args:
        - in: flower
        - out: type
      structure:
        type: feed-forward
        layers:
          # if name of instance `inst` if provided, this is interpreted as
          # the tensor `[inst[feat1], ..., inst[featN]]` covering the N input features of `inst`
          in: flower 
          hidden: [len(features) * 2, len(features)]
          out: ohe(type) # one hot encoding of class attribute

    Iris_2:
      args:
        - in: flower2
        - out: type_2
      structure:
        type: feed-forward
        layers:
          # if name of instance `inst` if provided, this is interpreted as
          # the tensor `[inst[feat1], ..., inst[featN]]` covering the N input features of `inst`
          in: flower2
          hidden: [len(features) * 2, len(features)]
          out: ohe(type_2) # one hot encoding of class attribute

knowledge:
  - rule: Only_one_of_3
    args: [x, c1, c2, c3]
    clause: x = c1 <-> not (flower = c2 or flower = c3) and x = c2 <-> not (flower = c1 or flower = c3) and x = c3 <-> not (flower = c1 or flower = c2)

  - rule: Only_one_of_2
    args: [x, c1, c2, c3]
    clause: x = c1 <-> not (flower = c2 or flower = c3) and x = c2 <-> not (flower = c1 or flower = c3) and x = c3 <-> not (flower = c1 or flower = c2)
 

constraints: 
  - forall flower. exists c. (flower[class] = c) <-> Iris(flower, c)
  - forall flower2. Iris(flower, c) and Only_one_of_3(c, setosa, versicolor, virginica)